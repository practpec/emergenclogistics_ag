üéØ Objetivo general del AG
Dise√±ar un sistema inteligente capaz de asignar eficientemente veh√≠culos y suministros a zonas afectadas por desastres, optimizando el uso de recursos limitados (veh√≠culos, suministros, tiempo y rutas) mediante un proceso evolutivo que busque soluciones cercanas al √≥ptimo log√≠stico.

‚úÖ Objetivos espec√≠ficos
Asignar cargas a veh√≠culos
Determinar qu√© tipo y cu√°nta cantidad de suministros debe llevar cada veh√≠culo, respetando su capacidad m√°xima y priorizando los insumos seg√∫n su nivel de urgencia.

Seleccionar destinos apropiados
Determinar a qu√© zonas afectadas debe ir cada veh√≠culo, considerando la prioridad de la zona y evitando duplicidades o rutas ineficientes.

Optimizar rutas
Elegir las rutas m√°s cortas o r√°pidas entre los centros de distribuci√≥n y las zonas afectadas, minimizando el tiempo de llegada y el consumo de recursos.

Maximizar el fitness
Evaluar cada posible soluci√≥n con una funci√≥n de aptitud (fitness) que combine criterios como:

Cantidad y prioridad de suministros entregados

Distancia recorrida

Cantidad de zonas atendidas

Evolucionar hacia mejores soluciones
Mediante operadores gen√©ticos como cruce, mutaci√≥n y selecci√≥n, mejorar iterativamente las soluciones para encontrar combinaciones m√°s eficientes.

üìå En resumen
Tu AG busca resolver un problema de optimizaci√≥n log√≠stica compleja en un contexto de emergencia humanitaria, generando y refinando autom√°ticamente soluciones viables para transportar recursos vitales de forma r√°pida, priorizada y eficiente.


Tu **algoritmo gen√©tico (AG)** quiere encontrar una **soluci√≥n √≥ptima o suficientemente buena** a un problema complejo, simulando el proceso de **evoluci√≥n biol√≥gica**. Dicho de otro modo:

---

## üéØ ¬øQu√© quiere "tu AG"?

Tu AG **busca generar soluciones viables y mejorarlas progresivamente** mediante selecci√≥n, cruza y mutaci√≥n, hasta alcanzar un resultado que cumpla con ciertos criterios de calidad o restricciones del problema.

---

## ‚úÖ ¬øC√≥mo se traduce esto seg√∫n el tipo de problema?

### 1. **Si est√°s resolviendo un problema de log√≠stica (como el que mencionaste sobre veh√≠culos y desastres)**:

Tu AG quiere:

* Asignar correctamente **veh√≠culos** a destinos afectados.
* Distribuir los **suministros** seg√∫n su prioridad y las restricciones del veh√≠culo (capacidad, ruta, tipo de desastre).
* Minimizar el **costo total**, **tiempo**, o **recorrido**.
* Cumplir restricciones como:

  * Que los caminos sean transitables para cada tipo de veh√≠culo.
  * Que no se exceda el peso o volumen m√°ximo.
  * Que se cubran las prioridades de los insumos por zona.

---

## üß† En t√©rminos abstractos:

Tu AG busca una **combinaci√≥n de genes** (variables) que represente una **soluci√≥n v√°lida y de alta calidad**.

En tu caso, cada **individuo** del AG puede representar una **posible distribuci√≥n de veh√≠culos, rutas e insumos** hacia los lugares afectados.

---

## üîÅ ¬øQu√© pasa en cada ciclo del AG?

1. **Inicializaci√≥n**: Se crean soluciones aleatorias (pero v√°lidas).
2. **Evaluaci√≥n (fitness)**: Se mide qu√© tan buena es cada soluci√≥n.
3. **Selecci√≥n**: Se eligen las mejores soluciones (o con m√°s probabilidad).
4. **Cruza**: Se combinan soluciones para generar nuevas.
5. **Mutaci√≥n**: Se hacen cambios aleatorios para explorar soluciones nuevas.
6. **Reemplazo**: Se elige qui√©n pasa a la siguiente generaci√≥n.
7. **Iteraci√≥n**: Se repite el ciclo hasta que se encuentra una buena soluci√≥n o se alcanza un n√∫mero m√°ximo de generaciones.

---

## üìå Resumen textual simple:

> Tu algoritmo gen√©tico quiere **evolucionar una poblaci√≥n de soluciones**, encontrando la **mejor forma de asignar veh√≠culos y suministros** a diferentes ubicaciones afectadas por desastres, **respetando restricciones** y **optimizando recursos** como tiempo, capacidad y prioridades.

---

Si quieres, puedo ayudarte a describir el "fitness" o la forma de representar tus individuos m√°s concretamente seg√∫n tu caso. ¬øTe lo explico con un ejemplo directo?
üß† Algoritmo Gen√©tico para Distribuci√≥n Log√≠stica de Ayuda Humanitaria
üìù Descripci√≥n del Problema
Este proyecto implementa un sistema de asignaci√≥n √≥ptima de veh√≠culos e insumos para la atenci√≥n de desastres naturales en una regi√≥n afectada, utilizando un algoritmo gen√©tico.

La regi√≥n se modela como un conjunto de nodos conectados entre s√≠ por rutas. Cada ejecuci√≥n representa la convinacion de vehiculos, los insumos de cada vehiculo y las rutas tomadas segun su destino, esto considerando(bloqueo de caminos, restricciones por tipo de veh√≠culo, punto de partida aleatorio, etc.).

El objetivo del sistema es maximizar la cobertura log√≠stica y la eficiencia del uso de recursos en la entrega de insumos humanitarios a m√∫ltiples destinos, teniendo en cuenta restricciones reales como peso, rutas, tipo de veh√≠culo y prioridades de insumos seg√∫n el tipo de desastre.

üéØ Objetivo del Algoritmo Gen√©tico
Asignar √≥ptimamente veh√≠culos a destinos con la mejor combinaci√≥n posible de insumos, de manera que:

Se cubran la mayor cantidad posible de destinos afectados.
Se entreguen insumos relevantes con base en la prioridad del desastre.
Se aproveche al m√°ximo la capacidad de carga de cada veh√≠culo.
Se respeten restricciones de ruta y tipo de veh√≠culo.
Cada veh√≠culo haga un solo trayecto a un √∫nico destino.
üì¶ Datos de Entrada
Los datos de entrada est√°n definidos en archivos JSON que representan el escenario completo. Estos archivos incluyen:

1. vehiculos.json
Lista de veh√≠culos disponibles con sus caracter√≠sticas:

Tipo (auto, van, cami√≥n)
Capacidad de carga m√°xima (toneladas)
Velocidad
Consumo de combustible
2. categorias_insumos.json
Lista de categor√≠as de insumos disponibles para enviar, con su peso promedio por unidad.

3. desastres.json
Definici√≥n de tipos de desastre y su prioridad asociada a cada categor√≠a de insumos (alta, media, baja).

4. nodos.json
Lista de ubicaciones o puntos geogr√°ficos (pueden ser tanto or√≠genes como destinos).

5. rutas.json
Lista de rutas entre nodos, con distancia (en km).

6. escenario.json
Archivo que representa el escenario espec√≠fico de ejecuci√≥n:

Tipo de desastre (solo uno por escenario)
Punto de partida del convoy (aleatorio)
Ubicaciones afectadas (destinos)
Rutas habilitadas y restricciones de veh√≠culos por ruta
Veh√≠culos disponibles
üîÑ Aleatoriedad
El sistema genera aleatoriamente los siguientes elementos en cada simulaci√≥n de escenario:

Punto de partida (origen de veh√≠culos): Se selecciona aleatoriamente de entre los nodos.
Rutas habilitadas / bloqueadas: Determina cu√°les caminos est√°n disponibles.
Restricciones de veh√≠culos por ruta: Qu√© tipos de veh√≠culos pueden usar cada ruta.
Tipo de desastre del escenario: Puede variar entre terremoto, inundaci√≥n, incendio, etc.
Destinos afectados: Se seleccionan de entre los nodos como ubicaciones de entrega.
üß¨ ¬øQu√© hace el algoritmo gen√©tico?
El AG tiene como responsabilidad principal:

Decidir qu√© veh√≠culo ir√° a qu√© destino.
Seleccionar qu√© cantidad de cada tipo de insumo llevar√° ese veh√≠culo.
Asegurarse de que la combinaci√≥n de carga sea v√°lida (no exceda peso).
Evaluar rutas v√°lidas seg√∫n restricciones.
Optimizar el aprovechamiento de carga y prioridad de insumos.
üß¨ Estructura del cromosoma
Cada individuo (soluci√≥n) est√° compuesto por un conjunto de genes, donde cada gen representa un veh√≠culo con su asignaci√≥n:

{
  "vehiculo_id": 2,
  "origen": "Ubicacion2",
  "destino": "Ubicacion4",
  "ruta": ["Ubicacion2", "Ubicacion4"],
  "insumos": {
    "Alimentaci√≥n b√°sica": 80,
    "Medicamentos e insumos m√©dicos": 20
  }
}
üì§ Datos de Salida
El algoritmo gen√©tico devuelve la mejor soluci√≥n encontrada, representada como:

Una lista de veh√≠culos con:
Su destino asignado.
La ruta utilizada.
Los insumos transportados.
El valor de la funci√≥n de fitness de esa soluci√≥n.
Estad√≠sticas globales como:
Porcentaje de cobertura de destinos.
Aprovechamiento promedio de la capacidad de carga.
Cantidad de insumos prioritarios entregados.
üß† Funci√≥n de Fitness
Una funci√≥n compuesta que combina varios criterios:

fitness = 
  (peso_entregado_relevante * ponderaci√≥n_prioridad) +
  (porcentaje_aprovechamiento_carga * 0.2) -
  (penalizaciones: exceso de peso, rutas inv√°lidas, insumos irrelevantes)
‚ö†Ô∏è Restricciones Importantes
Cada veh√≠culo puede visitar solo un destino por ejecuci√≥n.
No se permite exceder la capacidad de carga del veh√≠culo.
Solo pueden circular por rutas habilitadas y compatibles con su tipo.
Las rutas deben estar disponibles seg√∫n el escenario.
No se permiten repeticiones de destino por m√°s de un veh√≠culo (opcionalmente configurable).
üß™ Posibles mejoras futuras
Reintentos con caminos alternativos.
Validaci√≥n por condiciones clim√°ticas por nodo.
Introducci√≥n de costos y tiempo como restricciones adicionales.
Modelado de m√∫ltiples turnos o fases de entrega.
üß∞ Requisitos T√©cnicos
Node.js / Python (seg√∫n implementaci√≥n del AG)
Archivos JSON configurables en data/
Motor de AG propio o biblioteca como DEAP, pygad, o implementaci√≥n desde cero
üë®‚Äçüíª Autor
Desarrollado como soluci√≥n de optimizaci√≥n log√≠stica en contextos de emergencia, con un enfoque en arquitectura limpia, modularidad y separaci√≥n de capas.